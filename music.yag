{{/* Trigger: Regex with `\A-m(usic)?(\s+|\z)` */}}{{$helpCC := 8}}{{$botID := 204255221017214977}}

{{$q := cslice}}{{with (dbGet 20 "queue").Value}}{{$q = $q.AppendSlice .}}{{end}}{{$nq := cslice}}{{$nnq := cslice}}{{- range $i, $e := $q}}{{if $i}}{{$nq = $nq.Append $e}}{{end}}{{if gt $i 1}}{{$nnq = $nnq.Append $e}}{{end}}{{end}}
{{$e := execAdmin "prefix"}}{{$p := reReplace `[\.\[\]\-\?\!\\\*\{\}\(\)\|\+\$\^]` (slice $e (add 15 (len (str .Guild.ID))) (sub (len $e) 1)) `\$0`}}
{{$yagVC := 0}}{{$userVC := 0}}{{$usersVC := -1}}
{{range .Guild.VoiceStates}}
	{{if eq .UserID $botID}}
		{{$yagVC = .ChannelID}}
		{{range $.Guild.VoiceStates}}
			{{if eq .ChannelID $yagVC}}
				{{$usersVC = add $usersVC 1}}
			{{end}}
		{{end}}
	{{else if eq .UserID $.User.ID}}
		{{$userVC = .ChannelID}}
	{{end}}
{{end}}

{{define "a"}}
	{{$p := index . 0}}{{$c := index . 1}}{{$s := index . 2}}
	{{if eq $c 0}}
		{{$t := "Nothing"}}{{if index . 3}}{{$t = (index . 3 0).title}}{{end}}{{dbDel 20 "skip"}}
		{{sendMessage nil (cembed "title" "üé∂ Now playing" "description" (print $s.artist " - " $s.title "\n\nLength: `" $s.length "`\n\nUp next: `" $t "`") "color" (randInt 16777217))}}
	{{else}}
		{{$d := ""}}
		{{$pages := toInt (roundCeil (div (toFloat (len $s)) 10))}}
		{{$page := toInt (index . 3)}}
		{{if and (gt $page 0) (le $page $pages)}}
			{{$n := sub (mult $page 10) 10}}{{$b := $n}}
			{{range $i, $e := $s}}
				{{- if and (ge $i $b) (lt $i (add $b 10)) -}}
					{{- $n = add $n 1 -}}
					{{- $d = printf "%s\n\n`%d.` [%s - %s](https://music.youtube.com/search?q=%s+%s) **[%s]**" $d $n $e.artist $e.title (urlquery (lower $e.title)) (urlquery (lower $e.artist)) $e.length -}}
				{{- end -}}
			{{else}}
				{{$d = "‚ùå **Queue is empty!**"}}
			{{end}}
			{{$title := "üìÉ Queue"}}{{if ne $c 1}}{{$title = "üéµ Available songs"}}{{end}}
			{{sendMessage nil (cembed "title" $title "description" $d "color" 3324667 "thumbnail" (sdict "url" "https://raw.githubusercontent.com/iamcal/emoji-data/master/img-google-136/1f3b5.png") "footer" (sdict "text" (print "Page " $page "/" $pages)))}}
		{{else}}
‚ùå **That page doesn't exist!**
		{{end}}
	{{end}}
{{end}}

{{define "b"}}{{$t := exec "sb" (print .artist " - " .title " [" .length "]")}}{{end}}

{{define "e"}}{{$t := execAdmin "sbclose"}}{{dbDel 20 "skip"}}{{end}}

{{define "c"}}{{cancelScheduledUniqueCC . "music"}}{{end}}

{{define "s"}}{{scheduleUniqueCC (index . 0) nil (div (toDuration (index . 1)) 1000000000) "music" 1}}{{end}}

{{define "p"}}
	{{$p := index . 0}}{{$c := index . 1}}{{$q := index . 2}}{{$nq := index . 3}}{{$arg := index . 5}}
	{{if $arg}}
		{{$song := sdict}}
		{{$len := 0}}
		{{range index . 4}}
			{{- $found := len (reFind (print `(?i)` ((split (reReplace `[[\]\\.?^${}()|*+]` $arg `\$0`) "`"|joinStr `\x60`))) .title) -}}
			{{- if and $found (or (eq $len 0) (lt $found $len)) -}}
				{{- $len = $found -}}
				{{- $song = sdict . -}}
			{{- end -}}
		{{end}}
		{{if $song}}
			{{if eq $c 0}}
				{{dbSet 20 "queue" ($q.Append $song)}}
				üìÉ **Queued `{{print $song.artist " - " $song.title}}`!**
			{{else if eq $c 1}}
				{{dbSet 20 "queue" ((cslice (index $q 0) $song).AppendSlice $nq)}}üìÉ **Next up `{{print $song.artist " - " $song.title}}`!**
			{{else}}
				{{template "c" .CCID}}
				{{template "e"}}
				{{sendMessage nil "‚è≠ **Skipped!**"}}
				{{sleep 1}}
				{{template "b" $song}}
				{{template "a" (cslice $p 0 $song $nq)}}
				{{template "s" (cslice .CCID $song.length)}}
				{{dbSet 20 "queue" ((cslice $song).AppendSlice $nq)}}
			{{end}}
		{{else}}
			‚ùå **Couldn't find `{{$arg}}`!**
		{{end}}
	{{else}}
		‚ùå **Please specify a song!**
	{{end}}
{{end}}

{{if .ExecData}}
	{{$emb := sdict "title" "‚èπ Music stopped" "color" 16734296}}{{$r := ""}}
	{{if not $yagVC}}
		{{$r = "‚ùå The bot is no longer in a voice channel"}}
	{{else if not $usersVC}}
		{{$r = "ü•≤ Everyone has abandoned me..."}}
	{{else}}
		{{if $nq}}
			{{with index $nq 0}}
				{{$sil := execAdmin "sb" (print .artist " - " .title " [" .length "]")}}{{template "a" (cslice $p 0 . $nnq)}}{{template "s" (cslice $.CCID .length)}}
			{{end}}
		{{else}}
			{{$r = "üèÅ The queue has ended"}}
		{{end}}
	{{end}}
	{{dbSet 20 "queue" $nq}}
	{{if $r}}{{$emb.Set "description" (print "Reason:\n" $r)}}{{sendMessage nil (cembed $emb)}}{{end}}
{{else}}
	{{$syntax := cembed "title" "‚ùå Syntax:" "description" (print "Basic usage is: *" $p "music <action> [arguments]*\nMore advanced usage can be found [here](https://github.com/Engineer152/yagpdb-sb-music#the-command-actions-are-as-follows).\n\nYou can also do: " $p "music help <action>") "color" 16734296}}
	{{if gt (len .Args) 1}}
		{{$arg := ""}}
		{{range $i, $e := .CmdArgs}}
			{{if $i}}{{$arg = print $arg " " $e}}{{end}}
		{{end}}
		{{if $arg}}{{$arg = slice $arg 1}}{{end}}
		{{$sb := execAdmin "sb"}}{{$songs := cslice}}
		{{range reFindAllSubmatches `\x60.+?\x60` (slice $sb 29 (sub (len $sb) 36))}}
			{{with reFindAllSubmatches `\A\x60(.+?)\s-\s(.+?)\s\[(.+?)\]\x60\z` (index . 0)}}
				{{$songs = $songs.Append (sdict "artist" (index . 0 1) "length" (index . 0 3) "title" (index . 0 2))}}
			{{end}}
		{{end}}
		{{$a := lower (index .Args 1)}}
		{{if eq $a "help" "h"}}
			{{with $helpCC}}
				{{$t := "all"}}{{if $arg}}{{$t = $arg}}{{end}}
				{{execCC . nil 0 $t}}
			{{else}}
				‚ùå **Help CCID is not set!**
			{{end}}
		{{else if eq $a "list" "l"}}
			{{template "a" (cslice $p 2 $songs (or $arg 1))}}
		{{else if eq $a "search" "find"}}
			{{if $arg}}
				{{$found := cslice}}
				{{range $i, $e := $songs}}
					{{- if reFind (print `(?i)` ((split (reReplace `[[\]\\.?^${}()|*+]` $arg `\$0`) "`"|joinStr `\x60`))) $e.title -}}
						{{- $found = $found.Append (sdict "artist" $e.artist "length" $e.length "title" $e.title "number" $i) -}}
					{{- end -}}
				{{end}}
				{{with $found}}
					{{$emb := sdict "title" "üéµ Songs found"}}{{$d := ""}}
					{{range $i, $e := .}}
						{{if lt $i 10}}
							{{$d = printf "%s\n\n`%d.` [%s - %s](https://music.youtube.com/search?q=%s+%s) **[%s]**" $d (add $e.number 1) $e.artist $e.title (urlquery (lower $e.title)) (urlquery (lower $e.artist)) $e.length}}
						{{end}}
					{{end}}
					{{if ge (len $found) 10}}
						{{$d = print $d "\n\n\n**Only showing the first 10 results**"}}
					{{end}}
					{{$emb.Set "description" $d}}
					{{sendMessage nil (cembed $emb)}}
				{{else}}
					‚ùå **No songs found with `{{$arg}}`!**
				{{end}}
			{{else}}
				‚ùå **Please specify a search query!**
			{{end}}
		{{else if eq $a "play" "p"}}
				{{template "p" (cslice $p 0 $q $nq $songs $arg)}}
		{{else if eq $a "playall" "pa"}}
				{{dbSet 20 "queue" ($q.AppendSlice $songs)}}
				üìÉ **Queued all songs I could find!**
		{{else if eq $a "queue" "q"}}
			{{$t := $q}}{{if $yagVC}}{{$t = $nq}}{{end}}
			{{template "a" (cslice $p 1 $t (or $arg 1))}}
		{{else}}
			{{if not (reFind `^(n(?:owplaying|p)|p(?:(?:lay)?ski|(?:lay)?to)p|p(?:laynow|n)|s(?:(?:huffl|av)e|t(?:art|op)|kip)?|r(?:andom|eplay)|clear|yoink|again|begin|grab|next|end|cl|p[st]|e|r|b)$` $a)}}
				{{sendMessage nil $syntax}}
			{{else if not $userVC}}
				‚ùå **You're not in a voice channel!**
			{{else if eq $a "start" "begin" "b"}}
				{{if $yagVC}}
					‚ùå <@{{$botID}}> **is already playing something!**
				{{else if $q}}
					{{template "c" .CCID}}
					{{with index $q 0}}
						{{template "b" .}}
						{{sendMessage nil "üé∂ **Music started!**"}}
						{{template "a" (cslice $p 0 . $nnq)}}
						{{template "s" (cslice $.CCID .length)}}
					{{ end }}
				{{else}}
					ü§∑‚Äç‚ôÇÔ∏è **No songs in the queue**
				{{end}}
			{{else if not $yagVC}}
					‚ùå **Nothing is playing right now!**
			{{else if ne $yagVC $userVC}}
					‚ùå **You need to be in the same voice channel as <@{{$botID}}>!**
			{{else if eq $a "forceskip" "fs" "fskip"}}
				{{sendMessage nil "‚è≠ **Skipped!**"}}{{template "c" .CCID}}{{template "e"}}{{if $nq}}{{with index $nq 0}}{{sleep 1}}{{template "b" .}}{{template "a" (cslice $p 0 . $nnq)}}{{template "s" (cslice $.CCID .length)}}{{end}}{{dbSet 20 "queue" $nq}}{{else}}{{sendMessage nil (cembed "title" "‚èπ Music stopped" "description" "Reason:\nüèÅ The queue has ended" "color" 16734296)}}{{end}}
			{{else if eq $a "replay" "again"}}
				{{template "c" .CCID}}{{template "e"}}{{with index $q 0}}{{sleep 1}}{{template "b" .}}‚Ü™ **Replaying `{{print .artist " - " .title}}`!**{{template "s" (cslice $.CCID .length)}}{{end}}
			{{else if eq $a "random" "r"}}
				{{with index $songs (randInt (sub (len $songs) 1))}}‚ú® **Random song is...** `{{print .artist " - " .title}}`{{dbSet 20 "queue" ($q.Append .)}}{{end}}
			{{else if eq $a "playtop" "pt" "ptop"}}
				{{template "p" (cslice $p 1 $q $nq $songs $arg)}}
			{{else if eq $a "playskip" "ps" "pskip" "playnow" "pn"}}
				{{template "p" (cslice $p 2 $q $nq $songs $arg)}}
			{{else if eq $a "stop" "end" "e"}}
				{{template "c" .CCID}}{{template "e"}}‚èπ **Music stopped!**{{dbSet 20 "queue" $nq}}
			{{else if eq $a "nowplaying" "np"}}
				{{template "a" (cslice $p 0 (index $q 0) $nq)}}
			{{else if eq $a "grab" "save" "yoink"}}
				{{with index $q 0}}{{sendDM (cembed "title" "üé∂ Current song" "description" (print .artist " - " .title "\n\nLength: `" .length "`"))}}{{end}}üì¨ {{.User.Mention}}**, you've got mail!**
			{{else if eq $a "shuffle"}}
				{{if $nq}}{{dbSet 20 "queue" (shuffle $nq)}}üîÄ **Shuffled the queue!**{{else}}‚ùå **Nothing to shuffle!**{{end}}
			{{else if eq $a "clear" "cl"}}
				{{if $nq}}{{dbSet 20 "queue" (cslice (index $q 0))}}üóë **Queue cleared!**{{else}}‚ùå **Nothing to clear!**{{end}}
			{{end}}
		{{end}}
	{{else}}{{sendMessage nil $syntax}}{{end}}
{{end}}