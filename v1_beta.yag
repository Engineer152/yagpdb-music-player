{{/* 
Trigger: Reggex with `\A-m(usic)?(\s+|\z)`
*/}}

{{ $q := cslice }}{{ with (dbGet 20 "queue").Value }}
{{ $q = $q.AppendSlice . }}{{ end }}
{{ $nq := cslice }}
{{ $i := 0 }}
{{ range $q }}{{ if ne $i 0 }}{{ $nq = $nq.Append . }}{{ end }}{{ $i = add $i 1 }}{{ end }}{{/* Removes the first item from the queue */}}
{{ $i = 0 }}

{{ $yagVC := 0 }}{{ $userVC := 0 }}
{{ range .Guild.VoiceStates }}
  {{ if eq .UserID 204255221017214977 }}
    {{ $yagVC = .ChannelID }}
  {{ else if eq .UserID $.User.ID }}
    {{ $userVC = .ChannelID }}
  {{ end }}
{{ end }}

{{ if .ExecData }}
  {{ if and $nq $yagVC }}{{/* If there are still songs in the queue, and bot is still in VC */}}
    {{ $song := index $nq 0 }}
    {{ $name := print $song.artist " - " $song.title }}
    {{ if reFind `\AY` (execAdmin "sb" (print $name " [" $song.length "]")) }}
üõë **Music stopped**
    {{ else }}
üé∂ **Now playing** `{{ $name }}`
      {{ scheduleUniqueCC .CCID nil (div (toDuration $song.length) 1000000000) "music" 1 }}
    {{ end }}
  {{ else }}{{/* Empty queue */}}
üèÅ **The queue has ended**
  {{ end }}
  {{ dbSet 20 "queue" $nq }}
{{ else }}
  {{ $e := execAdmin "prefix" }}{{ $prefix := reReplace `[\.\[\]\-\?\!\\\*\{\}\(\)\|\+\$\^]` (slice $e (add 15 (len (str .Guild.ID))) (sub (len $e) 1)) `\$0` }}
  {{ $syntax := printf "‚ùå Syntax:\n%sm(usic) l(ist) - *To list all the available music*\n%sm(usic) p(lay) <song> - *To play a song*\n%sm(usic) q(ueue) <song> - *To queue a song*\n%sm(usic) e(nd) - *To end the music*\n%sm(usic) c(lear) - *To clear the queue*" $prefix $prefix $prefix $prefix $prefix }}
  {{ $args := parseArgs 1 $syntax (carg "string" "action") (carg "string" "song") }}
  {{ $a := reFind `.` ($args.Get 0) | lower }}
  {{ if not (eq $a "l" "p" "q" "s" "e" "c" "r") }}
    {{ $syntax }}
  {{ else }}
    {{ $sb := execAdmin "sb" }}
    {{ $songs := cslice }}
    {{ range reFindAllSubmatches `\x60.+?\x60` (slice $sb 29 (sub (len $sb) 36)) }}
      {{ with reFindAllSubmatches `\A\x60(.+?)\s-\s(.+?)\s\[(.+?)\]\x60\z` (index . 0) }}
        {{ $songs = $songs.Append (sdict "artist" (index . 0 1) "length" (toInt (index . 0 3)) "title" (index . 0 2)) }}
      {{ end }}
    {{ end }}
    {{ if eq $a "l" }}{{/* List command */}}
      {{ $display := "" }}
      {{- range $i, $_ := $songs }}
        {{- $display = printf "%s\n%d. %s - %s " $display (add $i 1) $_.artist $_.title }}
      {{ end }}
      {{ sendMessage nil (cembed
        "title" "üéµ **Available songs:**"
        "color" 14232643
        "description" $display) }}
    {{ else if eq $a "s" }} {{/* Skip command */}}
      {{ cancelScheduledUniqueCC .CCID "music" }}
      {{ if $nq }}
        {{ $song := index $nq 0 }}
        {{ $name := print $song.artist " - " $song.title }}
        {{ $sil := execAdmin "sbclose" }}{{ sleep 1 }}
        {{ $sil := exec "sb" (print $name " [" $song.length "]") }}
‚è≠ **Skipped!**
üé∂ **Now playing** `{{ $name }}`
        {{ scheduleUniqueCC .CCID nil (div (toDuration $song.length) 1000000000) "music" 1 }}
        {{ dbSet 20 "queue" $nq }}
      {{ else }}
ü§∑‚Äç‚ôÇÔ∏è **No more songs in the queue**
      {{ end }}
    {{ else if eq $a "e" }}{{/* Stop command */}}
      {{ cancelScheduledUniqueCC .CCID "music" }}
      {{ $sil := execAdmin "sbclose" }}
üõë **Music stopped**
    {{ else if eq $a "c" }}{{/* Clear command */}}
      {{ if $q }}
        {{ dbDel 20 "queue" }}
üóë **Queue cleared!**
      {{ else }}
‚ùå **Nothing to clear**
      {{ end }}
    {{ else if eq $a "r" }}{{/* Random song */}}
      {{ $song := index $songs (randInt (sub (len $songs) 1)) }}
      {{ $name := print $song.artist " - " $song.title }}
‚ú® **Random song is...** `{{ $name }}`
      {{ dbSet 20 "queue" ($q.Append $song) }}
    {{ else if $args.IsSet 1 }}{{/* If a song was provided */}}
      {{ $song := sdict }}
	    {{ range $songs }}
        {{ if reFind (print `(?i)` ((split (reReplace `[[\]\\.?^${}()|*+]` ($args.Get 1) `\$0`) "`"|joinStr `\x60`))) .title }}
          {{ $song = sdict . }}
        {{ end }}
      {{ end }}
      {{ if $song }}{{/* If a song was found */}}
        {{ $name := print $song.artist " - " $song.title }}
        {{ if eq $a "p" }}{{/* Play command with song */}}
          {{ if $yagVC }}
üîÆ **Next up** `{{ $name }}`
            {{ dbSet 20 "queue" ((cslice (index $q 0) $song).AppendSlice $nq) }}
          {{ else if $userVC }}
            {{ dbSet 20 "queue" ((cslice 0 $song).AppendSlice $q) }}
            {{ execCC .CCID nil 0 1 }}
		      {{ else }}
‚ùå **You're not in a voice channel!**
		      {{ end }}
        {{ else }}{{/* Queue command with song */}}
üìÉ **Queued** `{{ $name }}`
          {{ dbSet 20 "queue" ($q.Append $song) }}
        {{ end }}
      {{ else }}{{/* Provided song was not found */}}
‚ùå **Song `{{ $args.Get 1 }}` not found**, type __{{ $prefix }}music list__ to see a list of available songs.
      {{ end }}
    {{ else if eq $a "q" }}{{/* Queue command without song */}}
      {{ if $q }}{{/* If there is a queue */}}
üìÉ **Queue:**
        {{- range $q }}
          {{- $i = add $i 1 }}
          {{- printf "\n%d.\t`%s - %s`" $i .artist .title -}}
        {{ end }}
      {{ else }}{{/* If the queue is empty */}}
‚ùå **Queue is empty!**
      {{ end }}
    {{ else }}{{/* Play command without song */}}
      {{ if $q }}{{/* If there is a queue */}}
        {{ $song := index $q 0 }}
        {{ $name := print $song.artist " - " $song.title }}
        {{ if reFind `\AY` (exec "sb" (print $name " [" $song.length "]")) }}
‚ùå **You're not in a voice channel!**
        {{ else }}{{/* If the user is in a voice channel */}}
          {{ scheduleUniqueCC .CCID nil (div (toDuration $song.length) 1000000000) "music" 1 }}
üé∂ **Now playing** `{{ $name }}`
        {{ end }}
      {{ else }}{{/* If the queue is empty */}}
‚ùå **Nothing to play!**
      {{ end }}
    {{ end }}
  {{ end }}
{{ end }}


{{/* {{ define "announcement" }}
  {{ $display := "" }}
  {{- range $i, $_ := index . 1 }}
    {{- $display = printf "%s\n%d. %s - %s " $display (add $i 1) $_.artist $_.title }}
  {{ end }}
  {{ sendMessage nil (cembed "title" (index . 0) "description" $display "thumbnail" (sdict "url" "https://toppng.com/uploads/preview/musical-note-emoji-ico-11563291709xigzmoiifb.png")) }}
{{ end }}

$action is either "Music Available:" or something like "Queued" or "Now Playing"
{{ $action := "" }}
{{ $songs := "" }}
{{ $song := "" }}
{{ if eq $action "Music Available:" }}
  {{ template "announcement" (cslice $action $songs) }}
{{ else }}
  {{ template "announcement" (cslice $action (cslice $song)) }}
{{ end }} */}}
