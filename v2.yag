{{/* Trigger: Regex with `\A-m(usic)?(\s+|\z)` */}}

{{$helpCC := 8}}
{{$botid := 204255221017214977}}
{{$noPlay := "‚ùå **Nothing is playing right now!**"}}

{{/* Saves the whole queue as $q, then removes the first item and saves the rest to $nq */}}
{{$q := cslice}}{{with (dbGet 20 "queue").Value}}{{$q = $q.AppendSlice .}}{{end}}
{{$nq := cslice}}{{range $i, $e := $q}}{{if ne $i 0}}{{$nq = $nq.Append $e}}{{end}}{{end}}
{{$e := execAdmin "prefix"}}{{$p := reReplace `[\.\[\]\-\?\!\\\*\{\}\(\)\|\+\$\^]` (slice $e (add 15 (len (str .Guild.ID))) (sub (len $e) 1)) `\$0`}}

{{/* Checks if User/YAG is in VC, if so, saves channel ID */}}
{{$yagVC := 0}}{{$userVC := 0}}{{range .Guild.VoiceStates}}{{if eq .UserID $botid}}
{{$yagVC = .ChannelID}}{{else if eq .UserID $.User.ID}}{{$userVC = .ChannelID}}{{end}}{{end}}

{{define "announce"}}
	{{$p := index . 0}}{{$s := index . 2}}
	{{$embed := sdict "color" 0x32BAFB "thumbnail" (sdict "url" "https://raw.githubusercontent.com/iamcal/emoji-data/master/img-google-136/1f3b5.png")}}
	{{$title := "üé∂ Now playing"}}{{$display := ""}}
	{{if eq (index . 1) 0}}
		{{$display = print $s.artist " - " $s.title "\n\nLength:" $s.length}}
	{{else}}
		{{$pages := toInt (roundCeil (div (toFloat (len $s)) 5))}}
		{{$page := toInt (index . 3)}}
		{{if and (gt $page 0) (le $page $pages)}}
			{{$embed.Set "footer" (sdict "text" (print "Page " $page "/" $pages))}}
			{{$num := sub (mult $page 5) 5}}{{$start := $num}}{{$stop := add $num 5}}
			{{range $i, $e := $s}}
				{{- if and (ge $i $start) (lt $i $stop) -}}
					{{- $num = add $num 1 -}}
				  {{- $display = printf "%s\n\n`%d.` [%s - %s](https://music.youtube.com/search?q=%s+%s) **[%s]**" $display $num $e.artist $e.title (urlquery (lower $e.title)) (urlquery (lower $e.artist)) $e.length -}}
				{{- end -}}
			{{else}}
				{{$display = "‚ùå **Queue is empty!**"}}
			{{end}}
			{{if eq (index . 1) 1}}
				{{$title = "üìÉ Queue"}}
			{{else}}
				{{$title = "üéµ Available songs"}}
				{{$display = print $display "\n\n\n**Type **_" $p "music list [page]_** to see other pages (if there are any)**"}}
			{{end}}
			{{$embed.Set "title" $title}}
			{{$embed.Set "description" $display}}
			{{sendMessage nil (cembed $embed)}}
		{{else}}‚ùå **That page doesn't exist!**
		{{end}}
	{{end}}
{{end}}

{{/* Automation */}}
{{if .ExecData}}
	{{if and $nq $yagVC}}{{/* If there are still songs in the queue, and bot is still in VC */}}
		{{$song := index $nq 0}}
		{{$name := print $song.artist " - " $song.title}}
		{{if reFind `\AY` (execAdmin "sb" (print $name " [" $song.length "]"))}}üõë **Music stopped**
		{{else}}
			{{template "announce" (cslice $p 0 $song)}}
{{/* üé∂ **Now playing** `{{$name}}` */}}
			{{scheduleUniqueCC .CCID nil (div (toDuration $song.length) 1000000000) "music" 1}}
		{{end}}
	{{else}}{{/* Empty queue */}}üèÅ **The queue has ended**
	{{end}}
	{{dbSet 20 "queue" $nq}}

{{/* Regular commands */}}
{{else}}
	{{/* {{$syntax := printf "‚ùå Syntax:\n%sm(usic) l(ist) - *To list all the available music*\n%sm(usic) p(lay) <song> - *To play a song*\n%sm(usic) q(ueue) <song> - *To queue a song*\n%sm(usic) s(kip) - *To skip the current song*\n%sm(usic) e(nd) - *To end the music*\n%sm(usic) c(lear) - *To clear the queue*\n%sm(usic) r(andom) - *To play a random song*" $prefix $prefix $prefix $prefix $prefix $prefix $prefix}} */}}
	{{$syntax := print "Basic usage is: *" $p "music <action> [arguments]*\nMore advanced usage can be found "}}
	{{$syntaxEmb := cembed "title" "‚ùå Syntax:" "description" (print $syntax "[here](https://github.com/Engineer152/yagpdb-sb-music#the-command-actions-are-as-follows).\n\nYou can also do: " $p "music help <action>") "color" 16734296}}
	{{/* {{$args := parseArgs 1 (print "‚ùå **Syntax:**\n" $syntax "at https://github.com/Engineer152/yagpdb-sb-music. Or by doing *" $p "music help <action>*.") (carg "string" "action") (carg "string" "song")}} */}}
	{{if gt (len .Args) 1}}
		{{$arg := ""}}{{range $i, $e := .CmdArgs}}{{if $i}}{{$arg = print $arg " " $e}}{{end}}{{end}}
		{{if $arg}}{{$arg = slice $arg 1}}{{end}}
		{{/* {{$a := reFind `.` ($args.Get 0) | lower}}
		{{if not (eq $a "l" "p" "q" "s" "e" "c" "r")}}
			{{$syntax}} */}}
		{{$sb := execAdmin "sb"}}
		{{$songs := cslice}}
		{{range reFindAllSubmatches `\x60.+?\x60` (slice $sb 29 (sub (len $sb) 36))}}
			{{with reFindAllSubmatches `\A\x60(.+?)\s-\s(.+?)\s\[(.+?)\]\x60\z` (index . 0)}}
				{{$songs = $songs.Append (sdict "artist" (index . 0 1) "length" (index . 0 3) "title" (index . 0 2))}}
			{{end}}
		{{end}}
		{{$a := lower (index .Args 1)}}
		{{if eq $a "list" "l"}}
			{{template "announce" (cslice $p 2 $songs (or $arg 1))}}
		{{else if eq $a "help" "h"}}
			{{with $helpCC}}{{if $arg}}{{execCC . nil 0 $arg}}{{else}}‚ùå **Please specify an action!**{{end}}{{else}}‚ùå **Help CCID is not set!**{{end}}
		{{else}}
			{{$invUsg := false}}
			{{if not $yagVC}}‚ùå <@{{$botid}}> **is not playing anything right now!**
			{{else if not $userVC}}‚ùå **You're not in a voice channel!**
			{{else if ne $yagVC $userVC}}‚ùå **You need to be in the same voice channel as <@{{$botid}}>!**
			{{else if eq $a "play" "p"}}
				{{/* {{if $yagVC}} */}}
			{{else if eq $a "playall" "pa"}}
				{{dbSet 20 "queue" ($q.AppendSlice $songs)}}
			{{else if eq $a "playtop" "pt" "ptop"}}
			{{else if eq $a "playskip" "ps" "pskip" "playnow" "pn"}}
			{{else if eq $a "stop" "st" "end" "e"}}
				{{if $q}}
					{{cancelScheduledUniqueCC .CCID "music"}}
					{{$sil := execAdmin "sbclose"}}üõë **Music stopped**
				{{else}}{{$noPlay}}
				{{end}}
			{{else if eq $a "search" "find"}}
				{{if $arg}}
					{{$found := cslice}}
					{{range $i, $e := $songs}}
						{{- if reFind (print `(?i)` ((split (reReplace `[[\]\\.?^${}()|*+]` $arg `\$0`) "`"|joinStr `\x60`))) $e.title -}}
							{{- $found = $found.Append ($e.Set "number" $i) -}}
						{{- end -}}
					{{end}}
					{{$emb := sdict}}
					{{$display := ""}}
					{{with $found}}
						{{range .}}
							{{$display = printf "%s\n\n`%d.` [%s - %s](https://music.youtube.com/search?q=%s+%s) **[%s]**" $display (add $e.number 1) $e.artist $e.title (urlquery (lower $e.title)) (urlquery (lower $e.artist)) $e.length}}
						{{end}}
						{{sendMessage nil (cembed "title" "üéµ Songs found" "description" $display)}}
					{{else}}‚ùå **No songs found with `{{$arg}}`!**
					{{end}}
				{{else}}{{$invUsg = true}}{{end}}
			{{else if eq $a "nowplaying" "np"}}
				{{/* For when we have implemented the "requested by" */}}
				{{/* {{printf "Artist: %s\n\nTitle: %s\n\nLength: %s\n\nRequested By: %s" .artist .title .length .reqby}} */}}
				{{printf "Artist: %s\n\nTitle: %s\n\nLength: %s" .artist .title .length}}
			{{else if eq $a "grab" "save" "yoink"}}
				{{with index $q 0}}{{sendDM (printf "Artist: %s\n\nTitle: %s\n\nLength: " .artist .title .length)}}{{else}}{{$noPlay}}{{end}}
			{{else if eq $a "replay"}}
				{{with index $q 0}}{{dbSet 20 "queue" ((cslice .).AppendSlice $q)}}{{else}}{{$noPlay}}{{end}}
			{{else if eq $a "skip" "voteskip" "next" "s"}}
			{{else if eq $a "queue" "q"}}
			{{else if eq $a "shuffle"}}
				{{/* {{if $q}} */}}
			{{else if eq $a "clear" "cl"}}
				{{if $q}}
					{{dbDel 20 "queue"}}üóë **Queue cleared!**
				{{else}}‚ùå **Nothing to clear!**
				{{end}}
			{{else}}
				{{sendMessage nil $syntaxEmb}}
			{{end}}
			{{if $invUsg}}{{sendMessage nil (cembed "title" "‚ùå Invalid usage" "description" (print "Type `" $p "music help " $a "` for info"))}}{{end}}
		{{end}}
	{{else}}
		{{sendMessage nil $syntaxEmb}}
	{{end}}
{{end}}