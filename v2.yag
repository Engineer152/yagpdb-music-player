{{/* Trigger: Regex with `\A-m(usic)?(\s+|\z)` */}}

{{$helpCC := 8}}
{{$botid := 204255221017214977}}

{{/* Saves the whole queue as $q, then removes the first item and saves the rest to $nq */}}
{{$q := cslice}}{{with (dbGet 20 "queue").Value}}{{$q = $q.AppendSlice .}}{{end}}
{{$nq := cslice}}{{range $i, $e := $q}}{{if ne $i 0}}{{$nq = $nq.Append $e}}{{end}}{{end}}
{{$e := execAdmin "prefix"}}{{$p := reReplace `[\.\[\]\-\?\!\\\*\{\}\(\)\|\+\$\^]` (slice $e (add 15 (len (str .Guild.ID))) (sub (len $e) 1)) `\$0`}}

{{/* Checks if User/YAG is in VC, if so, saves channel ID */}}
{{$yagVC := 0}}{{$userVC := 0}}{{range .Guild.VoiceStates}}{{if eq .UserID $botid}}
{{$yagVC = .ChannelID}}{{else if eq .UserID $.User.ID}}{{$userVC = .ChannelID}}{{end}}{{end}}

{{define "announce"}}
	{{$p := index . 0}}{{$s := index . 2}}{{$title := "üé∂ Now playing"}}{{$description := ""}}{{$footer := sdict}}
	{{if eq (index . 1) 0}}{{$description = print $s.artist " - " $s.title "\n\nLength:" $s.length}}
	{{else}}
		{{$pages := toInt (roundCeil (div (toFloat (len $s)) 5))}}{{$page := toInt (index . 3)}}
		{{if and (gt $page 0) (le $page $pages)}}
			{{$footer = sdict "text" (print "Page " $page "/" $pages)}}{{$num := sub (mult $page 5) 5}}{{$start := $num}}{{$stop := add $num 5}}
			{{range $i, $e := $s}}
				{{- if and (ge $i $start) (lt $i $stop) -}}
					{{- $num = add $num 1 -}}
				  {{- $description = printf "%s\n\n`%d.` [%s - %s](https://music.youtube.com/search?q=%s+%s) **[%s]**" $description $num $e.artist $e.title (urlquery (lower $e.title)) (urlquery (lower $e.artist)) $e.length -}}
				{{- end -}}
			{{else}}{{$description = "‚ùå **Queue is empty!**"}}{{end}}
			{{if eq (index . 1) 1}}{{$title = "üìÉ Queue"}}{{else}}{{$title = "üéµ Available songs"}}{{$description = print $description "\n\n\n**Type **_" $p "music list [page]_** to see other pages (if there are any)**"}}{{end}}
			{{sendMessage nil (cembed "title" $title "description" $description "color" 0x32BAFB "thumbnail" (sdict "url" "https://raw.githubusercontent.com/iamcal/emoji-data/master/img-google-136/1f3b5.png") "footer" $footer)}}
		{{else}}‚ùå **That page doesn't exist!**{{end}}
	{{end}}
{{end}}

{{define "play"}}
	{{$q := index . 1}}{{$nq := index . 2}}{{$arg := index . 4}}
	{{if $arg}}
		{{$song := sdict}}{{$len := 0}}
		{{range index . 3}}
			{{- $found := len (reFind (print `(?i)` ((split (reReplace `[[\]\\.?^${}()|*+]` $arg `\$0`) "`"|joinStr `\x60`))) .title) -}}
			{{- if and $found (or (eq $len 0) (lt $found $len)) -}}{{- $len = $found -}}{{- $song = sdict . -}}{{- end -}}
		{{end}}
		{{if $song}}
			{{if eq (index . 0) 0}}{{dbSet 20 "queue" ($q.Append $song)}}üìÉ **Queued `{{print $song.artist " - " $song.title}}`!**
			{{else}}{{dbSet 20 "queue" ((cslice (index $q 0) $song).AppendSlice $nq)}}üìÉ **Next up `{{print $song.artist " - " $song.title}}`!**{{ end }}
		{{else}}‚ùå **Couldn't find `{{$arg}}`!**{{end}}
	{{else}}‚ùå **Please specify a song!**{{end}}
{{end}}


{{/* Automation */}}
{{if .ExecData}}
	{{if and $nq $yagVC}}{{/* If there are still songs in the queue, and bot is still in VC */}}
		{{$song := index $nq 0}}{{$name := print $song.artist " - " $song.title}}
		{{if reFind `\AY` (execAdmin "sb" (print $name " [" $song.length "]"))}}üõë **Music stopped**{{else}}{{template "announce" (cslice $p 0 $song)}}{{scheduleUniqueCC .CCID nil (div (toDuration $song.length) 1000000000) "music" 1}}{{end}}
	{{else}}{{/* Empty queue */}}üèÅ **The queue has ended**{{end}}{{dbSet 20 "queue" $nq}}

{{/* Regular commands */}}
{{else}}
	{{$syntax := cembed "title" "‚ùå Syntax:" "description" (print "Basic usage is: *" $p "music <action> [arguments]*\nMore advanced usage can be found [here](https://github.com/Engineer152/yagpdb-sb-music#the-command-actions-are-as-follows).\n\nYou can also do: " $p "music help <action>") "color" 16734296}}
	{{if gt (len .Args) 1}}
		{{$arg := ""}}{{range $i, $e := .CmdArgs}}{{if $i}}{{$arg = print $arg " " $e}}{{end}}{{end}}{{if $arg}}{{$arg = slice $arg 1}}{{end}}{{$sb := execAdmin "sb"}}{{$songs := cslice}}
		{{range reFindAllSubmatches `\x60.+?\x60` (slice $sb 29 (sub (len $sb) 36))}}{{with reFindAllSubmatches `\A\x60(.+?)\s-\s(.+?)\s\[(.+?)\]\x60\z` (index . 0)}}{{$songs = $songs.Append (sdict "artist" (index . 0 1) "length" (index . 0 3) "title" (index . 0 2))}}{{end}}{{end}}
		{{$a := lower (index .Args 1)}}
		{{if eq $a "list" "l"}}
			{{template "announce" (cslice $p 2 $songs (or $arg 1))}}
		{{else if eq $a "help" "h"}}
			{{with $helpCC}}{{if $arg}}{{execCC . nil 0 $arg}}{{else}}‚ùå **Please specify an action!**{{end}}{{else}}‚ùå **Help CCID is not set!**{{end}}
		{{else if eq $a "search" "find"}}
			{{if $arg}}{{$found := cslice}}{{range $i, $e := $songs}}{{- if reFind (print `(?i)` ((split (reReplace `[[\]\\.?^${}()|*+]` $arg `\$0`) "`"|joinStr `\x60`))) $e.title -}}{{- $found = $found.Append (sdict "artist" $e.artist "length" $e.length "title" $e.title "number" $i) -}}{{- end -}}{{end}}{{with $found}}{{$emb := sdict "title" "üéµ Songs found"}}{{$display := ""}}{{range $i, $e := .}}{{if lt $i 5}}{{$display = printf "%s\n\n`%d.` [%s - %s](https://music.youtube.com/search?q=%s+%s) **[%s]**" $display (add $e.number 1) $e.artist $e.title (urlquery (lower $e.title)) (urlquery (lower $e.artist)) $e.length}}{{end}}{{end}}{{if ge (len $found) 5}}{{$display = print $display "\n\n\n**Only showing the first 5 results**"}}{{end}}{{$emb.Set "description" $display}}{{sendMessage nil (cembed $emb)}}{{else}}‚ùå **No songs found with `{{$arg}}`!**{{end}}{{else}}‚ùå **Please specify a search query!**{{end}}
		{{else if eq $a "play" "p"}}
			{{template "play" (cslice 0 $q $nq $songs $arg)}}
		{{else if eq $a "playall" "pa"}}
			{{dbSet 20 "queue" ($q.AppendSlice $songs)}}üìÉ **Queued all songs I could find!**
		{{else if eq $a "queue" "q"}}
			{{template "announce" (cslice $p 1 $q (or $arg 1))}}
		{{else}}
			{{if not (reFind `^(n(?:owplaying|ext|p)|(?:voteski|s(?:to|ki))p|p(?:lay(?:skip|now|top)|(?:ski|to)p|[nst])|s(?:huffl|av)e|replay|clear|yoink|grab|end|cl|st|e|s)$` $a)}}{{sendMessage nil (cembed $syntax)}}
			{{else if not $userVC}}‚ùå **You're not in a voice channel!**
			{{else if eq $a "start"}}
			{{else if not $yagVC}}‚ùå **Nothing is playing right now!**
			{{else if ne $yagVC $userVC}}‚ùå **You need to be in the same voice channel as <@{{$botid}}>!**
			{{else if eq $a "playtop" "pt" "ptop"}}
				{{template "play" (cslice 1 $q $nq $songs $arg)}}
			{{else if eq $a "playskip" "ps" "pskip" "playnow" "pn"}}
			{{else if eq $a "stop" "st" "end" "e"}}
				{{cancelScheduledUniqueCC .CCID "music"}}{{$sil := execAdmin "sbclose"}}‚èπ **Music stopped!**
			{{else if eq $a "nowplaying" "np"}}
				{{/* For when we have implemented the "requested by" */}}
				{{/* {{printf "Artist: %s\n\nTitle: %s\n\nLength: %s\n\nRequested By: %s" .artist .title .length .reqby}} */}}
				{{printf "Artist: %s\n\nTitle: %s\n\nLength: %s" .artist .title .length}}
			{{else if eq $a "grab" "save" "yoink"}}
				{{with index $q 0}}{{sendDM (printf "Artist: %s\n\nTitle: %s\n\nLength: " .artist .title .length)}}{{end}}üì¨ {{.User.Mention}}**, you've got mail!**{{deleteResponse 5}}
			{{else if eq $a "replay"}}
				{{cancelScheduledUniqueCC .CCID "music"}}{{$sil := execAdmin "sbclose"}}
				{{with index $q 0}}{{$name := print .artist " - " .title}}{{$sil := exec "sb" (print $name " [" .length "]")}}‚Ü™ **Replaying `{{$name}}`!**{{end}}
			{{else if eq $a "skip" "voteskip" "next" "s"}}
			{{else if eq $a "shuffle"}}
				{{if $nq}}{{dbSet 20 "queue" (shuffle $nq)}}üîÄ **Shuffled the queue!**{{else}}‚ùå **Nothing to shuffle!**{{end}}
			{{else if eq $a "clear" "cl"}}
				{{if $nq}}{{dbSet 20 "queue" (cslice (index $q 0))}}üóë **Queue cleared!**{{else}}‚ùå **Nothing to clear!**{{end}}
			{{end}}
		{{end}}
	{{else}}{{sendMessage nil $syntax}}{{end}}
{{end}}